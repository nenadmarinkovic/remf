{"ast":null,"code":"async function fetchAPI(query, {\n  variables,\n  preview\n} = {}) {\n  const res = await fetch(process.env.GRAPHCMS_PROJECT_API, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${preview ? process.env.GRAPHCMS_DEV_AUTH_TOKEN : process.env.GRAPHCMS_PROD_AUTH_TOKEN}`\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    console.log(process.env.NEXT_EXAMPLE_CMS_GCMS_PROJECT_ID);\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getPreviewPostBySlug(slug) {\n  const data = await fetchAPI(`\n    query PostBySlug($slug: String!, $stage: Stage!) {\n      post(where: {slug: $slug}, stage: $stage) {\n        slug\n      }\n    }`, {\n    preview: true,\n    variables: {\n      stage: 'DRAFT',\n      slug\n    }\n  });\n  return data.post;\n}\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      posts {\n        slug\n      }\n    }\n  `);\n  return data.posts;\n}\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(`\n    {\n      posts(orderBy: date_DESC, first: 20) {\n        title\n        slug\n        excerpt\n        date\n        coverImage {\n          url(transformation: {\n            image: {\n              resize: {\n                fit:crop,\n                width:2000,\n                height:1000\n              }\n            }\n          })\n        }\n        author {\n          name\n          picture {\n            url(transformation: {\n              image: {\n                resize: {\n                  width:100,\n                  height:100,\n                  fit:crop\n                }\n              }\n            })\n          }\n        }\n      }\n    }\n  `, {\n    preview\n  });\n  return data.posts;\n}\nexport async function getPostAndMorePosts(slug, preview) {\n  const data = await fetchAPI(`\n    query PostBySlug($slug: String!, $stage: Stage!) {\n      post(stage: $stage, where: {slug: $slug}) {\n        title\n        slug\n        content {\n          html\n        }\n        date\n        ogImage: coverImage {\n          url(transformation: {image: {resize: {fit: crop, width: 2000, height: 1000}}})\n        }\n        coverImage {\n          url(transformation: {image: {resize: {fit: crop, width: 2000, height: 1000}}})\n        }\n        author {\n          name\n          picture {\n            url(transformation: {image: {resize: {fit: crop, width: 100, height: 100}}})\n          }\n        }\n      }\n      morePosts: posts(orderBy: date_DESC, where: {slug_not_in: [$slug]}) {\n        title\n        slug\n        excerpt\n        date\n        coverImage {\n          url(transformation: {image: {resize: {fit: crop, width: 2000, height: 1000}}})\n        }\n        author {\n          name\n          picture {\n            url(transformation: {image: {resize: {fit: crop, width: 100, height: 100}}})\n          }\n        }\n      }\n    }\n  `, {\n    preview,\n    variables: {\n      stage: preview ? 'DRAFT' : 'PUBLISHED',\n      slug\n    }\n  });\n  return data;\n}","map":{"version":3,"sources":["/Users/Nenad/Web Development/remf/lib/graphcms.js"],"names":["fetchAPI","query","variables","preview","res","fetch","process","env","GRAPHCMS_PROJECT_API","method","headers","Authorization","GRAPHCMS_DEV_AUTH_TOKEN","GRAPHCMS_PROD_AUTH_TOKEN","body","JSON","stringify","json","errors","console","log","NEXT_EXAMPLE_CMS_GCMS_PROJECT_ID","error","Error","data","getPreviewPostBySlug","slug","stage","post","getAllPostsWithSlug","posts","getAllPostsForHome","getPostAndMorePosts"],"mappings":"AAAA,eAAeA,QAAf,CAAwBC,KAAxB,EAA+B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAyB,EAAxD,EAA4D;AAC1D,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,oBAAb,EAAmC;AACxDC,IAAAA,MAAM,EAAE,MADgD;AAExDC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,aAAa,EAAG,UACdR,OAAO,GACHG,OAAO,CAACC,GAAR,CAAYK,uBADT,GAEHN,OAAO,CAACC,GAAR,CAAYM,wBACjB;AANM,KAF+C;AAUxDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBf,MAAAA,KADmB;AAEnBC,MAAAA;AAFmB,KAAf;AAVkD,GAAnC,CAAvB;AAeA,QAAMe,IAAI,GAAG,MAAMb,GAAG,CAACa,IAAJ,EAAnB;;AAEA,MAAIA,IAAI,CAACC,MAAT,EAAiB;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYd,OAAO,CAACC,GAAR,CAAYc,gCAAxB;AACAF,IAAAA,OAAO,CAACG,KAAR,CAAcL,IAAI,CAACC,MAAnB;AACA,UAAM,IAAIK,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,SAAON,IAAI,CAACO,IAAZ;AACD;;AAED,OAAO,eAAeC,oBAAf,CAAoCC,IAApC,EAA0C;AAC/C,QAAMF,IAAI,GAAG,MAAMxB,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA,MAN6B,EAOzB;AACEG,IAAAA,OAAO,EAAE,IADX;AAEED,IAAAA,SAAS,EAAE;AACTyB,MAAAA,KAAK,EAAE,OADE;AAETD,MAAAA;AAFS;AAFb,GAPyB,CAA3B;AAeA,SAAOF,IAAI,CAACI,IAAZ;AACD;AAED,OAAO,eAAeC,mBAAf,GAAqC;AAC1C,QAAML,IAAI,GAAG,MAAMxB,QAAQ,CAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,GAN6B,CAA3B;AAOA,SAAOwB,IAAI,CAACM,KAAZ;AACD;AAED,OAAO,eAAeC,kBAAf,CAAkC5B,OAAlC,EAA2C;AAChD,QAAMqB,IAAI,GAAG,MAAMxB,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAnC6B,EAoCzB;AAAEG,IAAAA;AAAF,GApCyB,CAA3B;AAsCA,SAAOqB,IAAI,CAACM,KAAZ;AACD;AAED,OAAO,eAAeE,mBAAf,CAAmCN,IAAnC,EAAyCvB,OAAzC,EAAkD;AACvD,QAAMqB,IAAI,GAAG,MAAMxB,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAvC6B,EAwCzB;AACEG,IAAAA,OADF;AAEED,IAAAA,SAAS,EAAE;AACTyB,MAAAA,KAAK,EAAExB,OAAO,GAAG,OAAH,GAAa,WADlB;AAETuB,MAAAA;AAFS;AAFb,GAxCyB,CAA3B;AAgDA,SAAOF,IAAP;AACD","sourcesContent":["async function fetchAPI(query, { variables, preview } = {}) {\n  const res = await fetch(process.env.GRAPHCMS_PROJECT_API, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${\n        preview\n          ? process.env.GRAPHCMS_DEV_AUTH_TOKEN\n          : process.env.GRAPHCMS_PROD_AUTH_TOKEN\n      }`,\n    },\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n  const json = await res.json()\n\n  if (json.errors) {\n    console.log(process.env.NEXT_EXAMPLE_CMS_GCMS_PROJECT_ID)\n    console.error(json.errors)\n    throw new Error('Failed to fetch API')\n  }\n\n  return json.data\n}\n\nexport async function getPreviewPostBySlug(slug) {\n  const data = await fetchAPI(\n    `\n    query PostBySlug($slug: String!, $stage: Stage!) {\n      post(where: {slug: $slug}, stage: $stage) {\n        slug\n      }\n    }`,\n    {\n      preview: true,\n      variables: {\n        stage: 'DRAFT',\n        slug,\n      },\n    }\n  )\n  return data.post\n}\n\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      posts {\n        slug\n      }\n    }\n  `)\n  return data.posts\n}\n\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(\n    `\n    {\n      posts(orderBy: date_DESC, first: 20) {\n        title\n        slug\n        excerpt\n        date\n        coverImage {\n          url(transformation: {\n            image: {\n              resize: {\n                fit:crop,\n                width:2000,\n                height:1000\n              }\n            }\n          })\n        }\n        author {\n          name\n          picture {\n            url(transformation: {\n              image: {\n                resize: {\n                  width:100,\n                  height:100,\n                  fit:crop\n                }\n              }\n            })\n          }\n        }\n      }\n    }\n  `,\n    { preview }\n  )\n  return data.posts\n}\n\nexport async function getPostAndMorePosts(slug, preview) {\n  const data = await fetchAPI(\n    `\n    query PostBySlug($slug: String!, $stage: Stage!) {\n      post(stage: $stage, where: {slug: $slug}) {\n        title\n        slug\n        content {\n          html\n        }\n        date\n        ogImage: coverImage {\n          url(transformation: {image: {resize: {fit: crop, width: 2000, height: 1000}}})\n        }\n        coverImage {\n          url(transformation: {image: {resize: {fit: crop, width: 2000, height: 1000}}})\n        }\n        author {\n          name\n          picture {\n            url(transformation: {image: {resize: {fit: crop, width: 100, height: 100}}})\n          }\n        }\n      }\n      morePosts: posts(orderBy: date_DESC, where: {slug_not_in: [$slug]}) {\n        title\n        slug\n        excerpt\n        date\n        coverImage {\n          url(transformation: {image: {resize: {fit: crop, width: 2000, height: 1000}}})\n        }\n        author {\n          name\n          picture {\n            url(transformation: {image: {resize: {fit: crop, width: 100, height: 100}}})\n          }\n        }\n      }\n    }\n  `,\n    {\n      preview,\n      variables: {\n        stage: preview ? 'DRAFT' : 'PUBLISHED',\n        slug,\n      },\n    }\n  )\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}